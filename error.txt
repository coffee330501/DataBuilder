<--- Last few GCs --->
31[12340:00000178A5138210]    16753 ms: Mark-sweep 2041.3 (2051.4) -> 2037.3 (2052.1) MB, 1000.4 / 0.0 ms  
(+ 451.9 ms in 107 steps since start of marking, biggest step 8.7 ms, walltime since start of marking 1468 ms) 
(average mu = 0.104, current mu = 0.011[12340:00000178A5138210]    
18027 ms: Mark-sweep 2042.5 (2052.4) -> 2039.8 (2053.6) MB, 915.9 / 0.0 ms 
 (+ 346.5 ms in 82 steps since start of marking, biggest step 8.4 ms, walltime since start of marking 1274 ms) 
 (average mu = 0.061, current mu = 0.009)

<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 00007FF7E95E404D]
    1: StubFrame [pc: 00007FF7E95E5151]
Security context: 0x03feaa55af39 <JSObject>
    2: generateVarchar [000000B715EDEF49] [E:\Workspace\Projects\DataBuilder\src\generator\data-generator.js:~23] [pc=0000013109C9507D](this=0x00631d2c4579 <JSGlobal Object>,255)
    3: /* anonymous */ [0000038BF77D1FB1] [E:\Workspace\Projects\DataBuilder\src\core\woker.js:~16] [pc=0000013109C9759D](this=0x00b715ec10...

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory

Writing Node.js report to file: report.20210201.003609.12340.0.001.json
Node.js report completed
 1: 00007FF7E8A1124F napi_wrap+124431
 2: 00007FF7E89B2A06 public: bool __cdecl v8::base::CPU::has_sse(void)const __ptr64+34502
 3: 00007FF7E89B36C6 public: bool __cdecl v8::base::CPU::has_sse(void)const __ptr64+37766
 4: 00007FF7E91B82DE private: void __cdecl v8::Isolate::ReportExternalAllocationLimitReached(void) __ptr64+94
 5: 00007FF7E91A0321 public: class v8::SharedArrayBuffer::Contents __cdecl v8::SharedArrayBuffer::Externalize(void) __ptr64+833
 6: 00007FF7E906DBEC public: static void __cdecl v8::internal::Heap::EphemeronKeyWriteBarrierFromCode(unsigned __int64,unsigned __int64,class v8::internal::Isolate * __ptr64)+1436
 7: 00007FF7E9078F90 public: void __cdecl v8::internal::Heap::ProtectUnprotectedMemoryChunks(void) __ptr64+1312
 8: 00007FF7E9075AC4 public: static bool __cdecl v8::internal::Heap::PageFlagsAreConsistent(class v8::internal::HeapObject)+3204
 9: 00007FF7E906B353 public: bool __cdecl v8::internal::Heap::CollectGarbage(enum v8::internal::AllocationSpace,enum v8::internal::GarbageCollectionReason,enum v8::GCCallbackFlags) __ptr64+1283
10: 00007FF7E9069B24 public: void __cdecl v8::internal::Heap::AddRetainedMap(class v8::internal::Handle<class v8::internal::Map>) __ptr64+2356
11: 00007FF7E908ADF5 public: class v8::internal::Handle<class v8::internal::HeapObject> __cdecl v8::internal::Factory::NewFillerObject(int,bool,enum v8::internal::AllocationType) __ptr64+53
12: 00007FF7E8DF6E19 public: class v8::internal::interpreter::JumpTableTargetOffsets::iterator & __ptr64 __cdecl v8::internal::interpreter::JumpTableTargetOffsets::iterator::operator=(class v8::internal::interpreter::JumpTableTargetOffsets::iterator && __ptr64) __ptr64+4057
13: 00007FF7E95E404D public: virtual bool __cdecl v8::internal::SetupIsolateDelegate::SetupHeap(class v8::internal::Heap * __ptr64) __ptr64+567949
14: 00007FF7E95E5151 public: virtual bool __cdecl v8::internal::SetupIsolateDelegate::SetupHeap(class v8::internal::Heap * __ptr64) __ptr64+572305
15: 0000013109C9507D 